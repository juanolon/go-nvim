package nvim

// THIS FILE HAS BEEN GENERATED BY github.com/juanolon/go-nvim/gen/gen.go. DO NOT EDIT

import (
	"log"
	"net/rpc"

	"github.com/ugorji/go/codec"
)

{{/* Error Type Definitions */}}
{{ range $name, $member := .Ed }}
	type {{ $name }}Error struct {
	    Tag int64
	}

    func New{{ $name|uppercase }} () *{{ $name|uppercase }}Error{
        return &{{ $name|uppercase }}Error{
            {{ $member.id }},
        }
    }
{{ end }}

type VimIdentifier struct {
	Id uint8
}

{{/* Type Definitions */}}
{{ range $name, $member := .Td }}
	type {{ $name }}Identifier struct {
	    Id uint8
	}

	func (i {{ $name }}Identifier)GetId() uint8 {
	    return i.Id
	}

    type {{ $name }} struct {
        obj Identifier
        client *rpc.Client
    }

    {{/* TODO uppercase $name */}}
    const {{ $name }}_TAG uint64 = {{ $member.id }}

    func New{{ $name|uppercase }} (id Identifier, client *rpc.Client) *{{ $name|uppercase }}{
        return &{{ $name|uppercase }}{
            id,
            client,
        }
    }
{{ end }}

{{/*
    structName -> returns Buffer from buffer_get_line
    methodName -> returns GetLine from buffer_get_line
*/}}
{{ range $method, $desc := .Fd }}
    func (this {{ $method|structName }}) {{ $method|methodName }} ({{ parseParameters $desc.Parameters true }}) {{ if ne $desc.Return "void"}}({{ if $desc.Return|isStruct }}*{{ $desc.Return|parseStruct }}{{ else }}{{ if eq $desc.Return "String" }}string{{ else }}{{ $desc.Return|parseType }}{{ end }}{{ end }}){{ end }}{
	    {{ if ne $desc.Return "void"}}
	        var ret {{ $desc.Return|parseType }}
	    {{ end }}
	    {{ if eq ($desc.Parameters|len) 0 }}
	        args := codec.MsgpackSpecRpcMultiArgs{}
	    {{ else }}
	    {{/* first parameter is always the current type (maybe this.obj)
	        remove the first argument from the parsedParameters and hardcode this.obj on the args
	    */}}
	        var args codec.MsgpackSpecRpcMultiArgs = []interface{}{ {{ parseParameters $desc.Parameters false }} }
	    {{ end }}
	    err := this.client.Call("{{ $method }}", args, {{ if ne $desc.Return "void"}}&ret{{ else }}nil{{ end }})
	    if err != nil {
		    log.Fatalf("Failed executing {{ $method|methodName }} on server, error: %s\n", err)
	    }
	    {{ if ne $desc.Return "void"}}
	        {{ if $desc.Return|isStruct }}
	            return &{{ $desc.Return|parseStruct }}{
	                ret,
                    this.client,
	            }
	        {{ else }}
	            {{/* TODO this is getting messy. clean up */}}
	            {{ if eq $desc.Return "String" }}
	                return string(ret)
	            {{ else }}
	                return ret
	            {{ end }}
	        {{ end }}
	    {{ end }}
    }
{{ end }}
